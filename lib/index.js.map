{"version":3,"file":"index.js","sources":["../src/util.js","../src/base.js","../src/simple.js","../src/combined.js","../src/index.js"],"sourcesContent":["//\n//  util.js\n//  validated-attributes\n//\n//  Created by Patrick Schneider on 17.07.18.\n//  Copyright (c) 2018 MeetNow! GmbH. All rights reserved.\n//\n// @flow\n//\n\nimport type { DetailedType } from './types';\n\nconst typeConversion = {\n  undefined: 'undefined',\n  number: 'number',\n  boolean: 'boolean',\n  string: 'string',\n  function: 'function',\n  '[object Function]': 'function',\n  '[object RegExp]': 'regexp',\n  '[object Array]': 'array',\n  '[object Date]': 'date',\n  '[object Error]': 'error',\n  '[object Null]': 'null',\n  '[object Symbol]': 'symbol',\n};\n\nconst objToString = Object.prototype.toString;\n\nconst objHasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n A more detailed version of the `typeof` operator\n @access public\n */\nexport function typeofPlus(x: mixed): DetailedType {\n  return typeConversion[typeof x] || typeConversion[objToString.call(x)] || (x ? 'object' : 'null');\n}\n\n/** @access private */\nexport function hasOwnProperty(obj: Object, name: string): boolean {\n  return objHasOwnProperty.call(obj, name);\n}\n\n/**\n Variant of Object.assign to be consistent across implementations\n @access private\n */\nexport function assign(obj: Object, source: ?Object): Object {\n  if (source != null) {\n    for (const key in source) {\n      if (hasOwnProperty(source, key)) {\n        obj[key] = source[key]; // eslint-disable-line no-param-reassign\n      }\n    }\n  }\n  return obj;\n}\n\n/**\n Variant of Object.keys to be consistent across implementations\n @access private\n */\nexport function keys(obj: Object): Array<string> {\n  if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {\n    throw new TypeError('Object.keys called on non-object');\n  }\n  const result = [];\n  for (const key in obj) {\n    if (hasOwnProperty(obj, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n A variant of the NodeJS' inspect function for internal use\n @access private\n */\nexport function inspect(value: any, depth: number = 3) {\n  let isArray;\n  switch (typeofPlus(value)) {\n    case 'undefined':\n      return 'undefined';\n    case 'number':\n      return value.toString();\n    case 'boolean':\n      return (value ? 'true' : 'false');\n    case 'string':\n      return `'${JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"')}'`;\n    case 'function':\n      return (value.name ? `[Function: ${value.name}]` : '[Function]');\n    case 'regexp':\n      return RegExp.prototype.toString.call(value);\n    case 'array':\n      isArray = true;\n      break;\n    case 'date':\n      return Date.prototype.toString.call(value);\n    case 'error':\n      return `[${Error.prototype.toString.call(value)}]`;\n    case 'null':\n      return 'null';\n    case 'symbol':\n      return Symbol.prototype.toString.call(value);\n    default:\n      isArray = false;\n      break;\n  }\n\n  if (depth === -1) {\n    if (isArray) {\n      return '[Array]';\n    }\n    else {\n      return '[Object]';\n    }\n  }\n\n  const contents = [];\n  if (isArray) {\n    for (let i = 0, l = value.length; i < l; ++i) {\n      contents.push(inspect(value[i], depth - 1));\n    }\n    return `[ ${contents.join(', ')} ]`;\n  }\n  else {\n    keys(value).forEach((key) => {\n      let name = JSON.stringify(key);\n      if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n        name = name.substr(1, name.length - 2);\n      }\n      else {\n        name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      }\n      contents.push(`${name}: ${inspect(value[key], depth - 1)}`);\n    });\n    return `{ ${contents.join(', ')} }`;\n  }\n}\n","//\n//  base.js\n//  validated-attributes\n//\n//  Created by Patrick Schneider on 17.07.18.\n//  Copyright (c) 2018 MeetNow! GmbH. All rights reserved.\n//\n// @flow\n//\n\nimport ExtendableError from 'es6-error';\n\nimport type { ValidatorFn, DefaultValue } from './types';\n\nimport { assign, inspect } from './util';\n\n/**\n Error class for validation errors\n\n You might want to test a thrown error with `instanceof` against this class.\n\n @access public\n */\nexport class AttributeValidationError extends ExtendableError {\n  expected: string;\n  got: mixed;\n  optional: boolean;\n\n  constructor(expected: string, got: mixed, optional: boolean) {\n    super(`expected: ${expected}${optional ? ' (optional)' : ''}\\ngot: ${inspect(got)}`);\n    this.expected = expected;\n    this.got = got;\n    this.optional = optional;\n  }\n}\n\n/**\n Base class for attributes\n\n You can inherit from this class to create custom validators; you must override\n at least the `_clone` method.\n\n @access public\n */\nexport class Attribute {\n  /**\n   Name of the attribute; usually reflects its type\n   @access public\n  */\n  name: string;\n\n  /**\n   Arbitrary flags you can use for your application purposes\n   @access protected\n   */\n  flags: {[string]: mixed};\n\n  /**\n   Default value of the attribute (function that creates a default or immutable\n   value)\n   @access public\n   */\n  default: DefaultValue;\n\n  /**\n   Whether this attribute is marked as optional; changes behavior of validate\n   and newSkeleton\n   @access public\n   */\n  isOptional: bool;\n\n  /** @access private */\n  _validator: ValidatorFn;\n\n  /**\n   Base constructor for attribute objects\n\n   Takes a validator function and a default value\n   @access protected\n   */\n  constructor(validator: ValidatorFn, defaultsTo: ?DefaultValue) {\n    this.flags = {};\n    this.default = defaultsTo;\n    this.isOptional = false;\n    this._validator = validator;\n  }\n\n  /**\n   Main method for validation\n\n   Throws `AttributeValidationError` on, you guessed it, validation errors.\n   Returns the validated object on success.\n\n   The default implementation calls the underlying validator function\n\n   Note: for use with flow type, cast the returned object to your target type.\n   @access public\n   */\n  validate(input: mixed): any {\n    if (input == null) {\n      if (!this.isOptional) {\n        throw new AttributeValidationError(this.name, input, false);\n      }\n    }\n    else if (!this._validator(input)) {\n      throw new AttributeValidationError(this.name, input, this.isOptional);\n    }\n    return input;\n  }\n\n  /**\n   Creates a new default value for this attribute\n\n   Returns the value set with `defaultsTo` or, if it is a function, invokes\n   it and returns its result.\n   @access public\n   */\n  newDefault(): mixed {\n    if (typeof this.default === 'function') {\n      return this.default();\n    }\n    else {\n      return this.default;\n    }\n  }\n\n  /**\n   Merges the given value with the default of this attribute\n\n   Optionally treats `null` as `undefined` even for optional attributes.\n\n   Works best for schema or tuple attributes since it works recursively; it will\n   also remove any fields that are not specified in the schema (!)\n   @access public\n   */\n  mergeDefault(value: mixed, nullIsUndefined: ?boolean): any {\n    if (value === undefined || (value === null && (!this.isOptional || nullIsUndefined))) {\n      return this.newDefault();\n    }\n    else {\n      return value;\n    }\n  }\n\n  /**\n   Returns a new skeleton for this attribute\n\n   This is most useful for schema or compound attributes, where it will emit\n   an object or array whose fields are set to null or which is empty.\n   @access public\n   */\n  newSkeleton(): mixed {\n    return null;\n  }\n\n  /**\n   Sets the attributes default value\n\n   The default can be a (immutable) value or a function creating a value. The\n   latter is recommended if the value is something mutable, like an array or\n   object.\n\n   Clones the attribute object.\n   @access public\n   */\n  defaultsTo(newDefault: DefaultValue): this {\n    const c = this._clone();\n    c.default = newDefault;\n    return c;\n  }\n\n  /**\n   Adds one or more boolean flags\n\n   Same as calling `with({'flag1': true, 'flag2': true, ...})`.\n\n   Clones the attribute object.\n   @access public\n   */\n  as(...flags: Array<string>): this {\n    const c = this._clone();\n    for (const flag of flags) {\n      if (typeof flag !== 'string') {\n        throw new Error('flags must be strings');\n      }\n      c.flags[flag] = true;\n    }\n    return c;\n  }\n\n  /**\n   Adds one or more arbitrary flags\n\n   Clones the attribute object.\n   @access public\n   */\n  with(flags: {[string]: mixed}): this {\n    const c = this._clone();\n    assign(c.flags, flags);\n    return c;\n  }\n\n  /**\n   Turns the attribute optional\n\n   Clones the attribute object.\n   @access public\n   */\n  makeOptional(): this {\n    const c = this._clone();\n    c.isOptional = true;\n    return c;\n  }\n\n  /**\n   Internal method to clone an attribute object\n\n   Subclasses must override this method, and call `_copyAttrProps` on the new\n   instance. Do not call the base implementation.\n   @access protected\n   */\n  _clone(): Attribute {\n    return new Attribute(this._validator)._copyAttrProps(this);\n  }\n\n  /**\n   Internal method that copies internal properties from the given attribute to\n   this attribute\n\n   Used by `_clone`. Subclasses must call the base implementation before copying\n   their own properties.\n\n   The base implementation copies the name, isOptional, default and flags\n   (as shallow copy). Returns `this`.\n   @access protected\n   */\n  _copyAttrProps(source: Attribute): this {\n    this.name = source.name;\n    this.isOptional = source.isOptional;\n    this.default = source.default;\n    assign(this.flags, source.flags);\n    return this;\n  }\n}\n","//\n//  simple.js\n//  validated-attributes\n//\n//  Created by Patrick Schneider on 17.07.18.\n//  Copyright (c) 2018 MeetNow! GmbH. All rights reserved.\n//\n// @flow\n//\n\nimport { Attribute } from './base';\n\nimport { typeofPlus } from './util';\n\n/**\n Represents a simple fixed value attribute\n\n The comparison is done with the === operator.\n @access public\n */\nexport class FixedAttribute extends Attribute {\n  /**\n   The fixed value itself\n   @access protected\n   */\n  value: mixed;\n\n  /**\n   Type of the fixed value\n   @access protected\n   */\n  valueType: string;\n\n  constructor(value: mixed) {\n    super(x => x === value, value);\n    this.value = value;\n    this.valueType = typeofPlus(value);\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): FixedAttribute {\n    return new FixedAttribute(this.value)._copyAttrProps(this);\n  }\n}\n\n/**\n Represents an instanceOf-attribute\n\n The class is instantiated with an empty constructor as default.\n @access public\n */\nexport class ObjectAttribute extends Attribute {\n  /**\n   Class object\n   @access protected\n   */\n  cls: any;\n\n  constructor(Cls: any) {\n    super(x => x instanceof Cls, () => new Cls());\n    this.cls = Cls;\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): ObjectAttribute {\n    return new ObjectAttribute(this.cls)._copyAttrProps(this);\n  }\n}\n","//\n//  combined.js\n//  validated-attributes\n//\n//  Created by Patrick Schneider on 17.07.18.\n//  Copyright (c) 2018 MeetNow! GmbH. All rights reserved.\n//\n// @flow\n//\n\nimport { AttributeValidationError, Attribute } from './base';\n\nimport { FixedAttribute } from './simple';\n\nimport type { ValidatorFn, ElementIterator } from './types';\n\nimport { typeofPlus, hasOwnProperty } from './util';\n\n/**\n Represents an oneOf-attribute\n\n The first value is used to generate the default.\n @access public\n */\nexport class EnumAttribute extends Attribute {\n  /**\n   List of valid attributes for this enum\n   @access protected\n   */\n  values: Array<Attribute>;\n\n  constructor(values: Array<any>) {\n    const attrs = values.map(toAttribute);\n    super(x => attrs.some(y => isValid(y, x)), attrs[0].default);\n    this.values = attrs;\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): EnumAttribute {\n    return new EnumAttribute(this.values)._copyAttrProps(this);\n  }\n}\n\n/**\n Represents an array attribute with fixed number and type of entries\n\n The default value is an array with default values of each type. The skeleton\n is either `null` for optional tuples or an array with all values set to the\n skeleton of each type.\n @access public\n */\nexport class TupleAttribute extends Attribute {\n  /**\n   Array of attributes to validate the tuple's contents against\n   @access protected\n   */\n  elements: Array<Attribute>;\n\n  constructor(selements: Array<any>) {\n    if (typeofPlus(selements) !== 'array') {\n      throw new Error('you need to pass a plain array describing the elements');\n    }\n\n    const elements = [];\n    for (let i = 0; i < selements.length; i++) {\n      elements.push(toAttribute(selements[i]));\n    }\n\n    super(x => typeofPlus(x) === 'array', () => elements.map(e => e.newDefault()));\n    this.elements = elements;\n  }\n\n  /**\n   Main method for validation\n\n   Extends base implementation\n   @access public\n   */\n  validate(input: any): any {\n    super.validate(input);\n\n    if (input == null) {\n      return input;\n    }\n\n    if (input.length !== this.elements.length) {\n      throw new AttributeValidationError(\n        `tuple of length ${this.elements.length}`,\n        `tuple of length ${input.length}`,\n        this.isOptional\n      );\n    }\n\n    const errors = [];\n    for (let i = 0; i < this.elements.length; i++) {\n      try {\n        this.elements[i].validate(input[i]);\n      }\n      catch (err) {\n        if (err instanceof AttributeValidationError) {\n          errors.push({\n            expected: `${err.expected} element`,\n            index: i,\n            optional: err.optional,\n            got: err.got,\n          });\n        }\n        else {\n          throw err;\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new AttributeValidationError(`valid ${this.name} fields`, errors, this.isOptional);\n    }\n\n    return input;\n  }\n\n  /**\n   Merges the given value with the default of this attribute\n\n   Overrides base implementation\n   @access public\n   */\n  mergeDefault(value: mixed, nullIsUndefined: ?boolean): any {\n    if (value === undefined || (value === null && (!this.isOptional || nullIsUndefined))) {\n      return this.newDefault();\n    }\n    else if (value == null || !Array.isArray(value)) {\n      throw new Error('value must be an array (or undefined)');\n    }\n    else if (value.length !== this.elements.length) {\n      throw new Error('the number of elements must be equal');\n    }\n    else {\n      const arr = [];\n      for (let i = 0; i < this.elements.length; i++) {\n        arr.push(this.elements[i].mergeDefault(value[i], nullIsUndefined));\n      }\n      return arr;\n    }\n  }\n\n  /**\n   Returns a new skeleton for this attribute\n\n   Overrides base implementation\n   @access public\n   */\n  newSkeleton(): ?Array<mixed> {\n    if (this.isOptional) {\n      return null;\n    }\n    else {\n      return this.elements.map(e => e.newSkeleton());\n    }\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): TupleAttribute {\n    return new TupleAttribute(this.elements)._copyAttrProps(this);\n  }\n}\n\n/**\n Represents array and map attributes\n\n Optionally the values can be type-checked as well. Use `ofType` for this.\n\n If the attribute is marked as optional, `newSkeleton` will return null.\n Otherwise it creates an empty array or map.\n @access protected\n */\nexport class CompoundAttribute extends Attribute {\n  /**\n   Attribute that all elements must have\n   @access protected\n   */\n  elementAttr: ?Attribute;\n\n  /** @access private */\n  _skeletonMaker: () => mixed;\n  /** @access private */\n  _iterator: ElementIterator;\n\n  constructor(validator: ValidatorFn, skeletonMaker: () => mixed, iterator: ElementIterator) {\n    super(validator, skeletonMaker);\n    this._skeletonMaker = skeletonMaker;\n    this._iterator = iterator;\n  }\n\n  /**\n   Bind a type to the contents of the compound attribute\n\n   All values of the compound will be validated against the given attribute.\n\n   Clones the attribute object.\n   @access public\n   */\n  ofType(spec: any): this {\n    const c = this._clone();\n    const elementAttr = toAttribute(spec);\n    c.elementAttr = elementAttr;\n    const i = this.name.indexOf('<');\n    if (i === -1) {\n      c.name = `${this.name}<${elementAttr.name}>`;\n    }\n    else {\n      c.name = `${this.name.substr(0, i)}<${elementAttr.name}>`;\n    }\n    return c;\n  }\n\n  /**\n   Main method for validation\n\n   Extends base implementation\n   @access public\n   */\n  validate(input: mixed): any {\n    super.validate(input);\n\n    if (input == null || this.elementAttr == null) {\n      return input;\n    }\n\n    const eltAttr = this.elementAttr;\n    const errors = [];\n    this._iterator(input, (elt, index) => {\n      try {\n        eltAttr.validate(elt);\n      }\n      catch (err) {\n        if (err instanceof AttributeValidationError) {\n          errors.push({\n            expected: `${err.expected} element`,\n            key: index,\n            optional: err.optional,\n            got: err.got,\n          });\n        }\n        else {\n          throw err;\n        }\n      }\n    });\n    if (errors.length > 0) {\n      throw new AttributeValidationError(`valid ${this.name} elements`, errors, this.isOptional);\n    }\n\n    return input;\n  }\n\n  /**\n   Returns a new skeleton for this attribute\n\n   Overrides base implementation\n   @access public\n   */\n  newSkeleton() {\n    if (this.isOptional) {\n      return null;\n    }\n    else {\n      return this._skeletonMaker();\n    }\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): CompoundAttribute {\n    return new CompoundAttribute(this._validator, this._skeletonMaker, this._iterator)._copyAttrProps(this);\n  }\n\n  /**\n   Copies the attribute's properties\n\n   Extends base implementation\n   @access protected\n   */\n  _copyAttrProps(source: Attribute): this {\n    super._copyAttrProps(source);\n    // source is contravariant, need to check\n    if (source instanceof CompoundAttribute) {\n      this.elementAttr = source.elementAttr;\n    }\n    return this;\n  }\n}\n\n/**\n Represents a (plain) object attribute with fields of given types\n\n The default value is an object with default values of each type for each field.\n The skeleton is either `null` for optional schemas or an object with all values\n set to the skeleton of each type.\n @access public\n */\nexport class SchemaAttribute extends Attribute {\n  /**\n   Fields to validate\n   @access protected\n   */\n  fields: {[string]: Attribute};\n\n  constructor(sfields: {[string]: any}) {\n    if (typeofPlus(sfields) !== 'object') {\n      throw new Error('you need to pass a plain object describing the attributes');\n    }\n\n    const fields = {};\n    for (const f in sfields) {\n      if (hasOwnProperty(sfields, f)) {\n        fields[f] = toAttribute(sfields[f]);\n      }\n    }\n\n    super(x => typeofPlus(x) === 'object', () => {\n      const obj = {};\n      for (const f in fields) {\n        if (hasOwnProperty(fields, f)) {\n          obj[f] = fields[f].newDefault();\n        }\n      }\n      return obj;\n    });\n    this.fields = fields;\n  }\n\n  /**\n   Main method for validation\n\n   Extends base implementation\n   @access public\n   */\n  validate(input: any): any {\n    super.validate(input);\n\n    if (input == null) {\n      return input;\n    }\n\n    const errors = [];\n    for (const f in this.fields) {\n      if (hasOwnProperty(this.fields, f)) {\n        try {\n          this.fields[f].validate(input[f]);\n        }\n        catch (err) {\n          if (err instanceof AttributeValidationError) {\n            errors.push({\n              expected: `${err.expected} field`,\n              name: f,\n              optional: err.optional,\n              got: err.got,\n            });\n          }\n          else {\n            throw err;\n          }\n        }\n      }\n    }\n    if (errors.length > 0) {\n      throw new AttributeValidationError(`valid ${this.name}`, errors, this.isOptional);\n    }\n\n    return input;\n  }\n\n  /**\n   Merges the given value with the default of this attribute\n\n   Overrides base implementation\n   @access public\n   */\n  mergeDefault(value: mixed, nullIsUndefined: ?boolean): any {\n    if (value === undefined || (value === null && (!this.isOptional || nullIsUndefined))) {\n      return this.newDefault();\n    }\n    else if (value == null || typeof value !== 'object') {\n      throw new Error('value must be an object (or undefined)');\n    }\n    else {\n      const obj = {};\n      for (const f in this.fields) {\n        if (hasOwnProperty(this.fields, f)) {\n          obj[f] = this.fields[f].mergeDefault(value[f], nullIsUndefined);\n        }\n      }\n      return obj;\n    }\n  }\n\n  /**\n   Returns a new skeleton for this attribute\n\n   Overrides base implementation\n   @access public\n   */\n  newSkeleton() {\n    if (this.isOptional) {\n      return null;\n    }\n    else {\n      const obj = {};\n      for (const f in this.fields) {\n        if (hasOwnProperty(this.fields, f)) {\n          obj[f] = this.fields[f].newSkeleton();\n        }\n      }\n      return obj;\n    }\n  }\n\n  /**\n   Clone the attribute\n\n   Overrides base implementation\n   @access protected\n   */\n  _clone(): SchemaAttribute {\n    return new SchemaAttribute(this.fields)._copyAttrProps(this);\n  }\n}\n\n/**\n Converts a fixed value or tuple or schema to the respective Attribute object\n @access public\n */\nexport function toAttribute(v: any): Attribute {\n  if (v instanceof Attribute) {\n    return v;\n  }\n\n  switch (typeofPlus(v)) {\n    case 'object': {\n      const a = new SchemaAttribute(v);\n      a.name = 'schema';\n      return a;\n    }\n    case 'array': {\n      const a = new TupleAttribute(v);\n      a.name = 'tuple';\n      return a;\n    }\n    default: {\n      const a = new FixedAttribute(v);\n      a.name = JSON.stringify(v);\n      return a;\n    }\n  }\n}\n\n/**\n Tests a value against a specification\n\n Returns true or false rather than trowing an exception\n @access public\n */\nexport function isValid(spec: any, value: mixed): boolean {\n  try {\n    toAttribute(spec).validate(value);\n    return true;\n  }\n  catch (err) {\n    if (err instanceof AttributeValidationError) {\n      return false;\n    }\n    else {\n      throw err;\n    }\n  }\n}\n","//\n//  index.js\n//  validated-attributes\n//\n//  Created by Patrick Schneider on 17.05.17.\n//  Copyright (c) 2017-2018 MeetNow! GmbH. All rights reserved.\n//\n// @flow\n//\n\nimport { AttributeValidationError, Attribute } from './base';\n\nimport { FixedAttribute, ObjectAttribute } from './simple';\n\nimport {\n  EnumAttribute,\n  TupleAttribute,\n  CompoundAttribute,\n  SchemaAttribute,\n  toAttribute,\n  isValid,\n} from './combined';\n\nimport type {\n  ValidatorFn,\n  DefaultValue,\n  ElementValidatorFn,\n  ElementIterator,\n  DetailedType,\n} from './types';\n\nimport {\n  typeofPlus,\n  hasOwnProperty,\n  keys,\n} from './util';\n\nconst INTEGER_RE = /^[0-9]+$/;\nconst UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst STRING_DATE_RE = /^[0-9]{4}-(1[0-2]|0[1-9])-(3[01]|[1-2][0-9]|0[1-9])$/;\n\n// http://www.regular-expressions.info/email.html\nconst EMAIL_RE = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\n\n/**\n Short-cut to run a validation of the given specification against the given\n value\n @access public\n */\nfunction validate(spec: any, value: mixed): any {\n  return toAttribute(spec).validate(value);\n}\n\n/**\n Short-cut to create a default value for the given specification\n @access public\n */\nfunction newDefault(spec: any): any {\n  return toAttribute(spec).newDefault();\n}\n\n/**\n Short-cut to merge the given value into the given specification, filling up\n missing values with default values\n @access public\n */\nfunction mergeDefault(spec: any, value: mixed, nullIsUndefined: ?boolean): any {\n  return toAttribute(spec).mergeDefault(value, nullIsUndefined);\n}\n\n/**\n Short-cut to create a skeleton from the given specification\n @access public\n */\nfunction newSkeleton(spec: any): any {\n  return toAttribute(spec).newSkeleton();\n}\n\nconst required = {\n  fixed: (v: mixed) => {\n    const a = new FixedAttribute(v);\n    a.name = JSON.stringify(v);\n    return a;\n  },\n\n  string: new Attribute(x => typeofPlus(x) === 'string', ''),\n  integerString: new Attribute((x: any) => typeofPlus(x) === 'string' && INTEGER_RE.test(x), '0'),\n  nonemptyString: new Attribute((x: any) => typeofPlus(x) === 'string' && x.trim().length > 0, '-'),\n  uuid: new Attribute((x: any) => typeofPlus(x) === 'string' && UUID_RE.test(x), '00000000-0000-4000-8000-000000000000'),\n  email: new Attribute((x: any) => typeofPlus(x) === 'string' && EMAIL_RE.test(x), 'name@example.com'),\n  dateString: new Attribute((x: any) => typeofPlus(x) === 'string' && STRING_DATE_RE.test(x) && !Number.isNaN(Date.parse(x)), '2000-01-01'),\n\n  boolean: new Attribute(x => typeofPlus(x) === 'boolean', false),\n  number: new Attribute(x => typeofPlus(x) === 'number', 0),\n  integer: new Attribute(x => typeofPlus(x) === 'number' && x === parseInt(x, 10), 0),\n  regexp: new Attribute(x => typeofPlus(x) === 'regexp', () => new RegExp('')),\n  date: new Attribute(x => typeofPlus(x) === 'date', () => new Date()),\n  function: new Attribute(x => typeofPlus(x) === 'function', () => () => undefined),\n\n  array: new CompoundAttribute(\n    x => typeofPlus(x) === 'array',\n    () => [],\n    (a: Array<mixed>, ev: ElementValidatorFn) => a.forEach(ev)\n  ),\n  map: new CompoundAttribute(\n    x => typeofPlus(x) === 'object',\n    () => {},\n    (o: Object, ev: ElementValidatorFn) => keys(o).forEach(n => ev(o[n], n))\n  ),\n\n  tuple: (elements: Array<mixed>) => {\n    const a = new TupleAttribute(elements);\n    a.name = 'tuple';\n    return a;\n  },\n  schema: (fields: {[string]: mixed}) => {\n    const a = new SchemaAttribute(fields);\n    a.name = 'schema';\n    return a;\n  },\n\n  instanceOf: (cls: any) => {\n    const a = new ObjectAttribute(cls);\n    a.name = `instanceOf(${cls.name})`;\n    return a;\n  },\n  oneOf: (...args: Array<mixed>) => {\n    const a = new EnumAttribute(args);\n    a.name = `oneOf(${a.values.map((attr: Attribute) => attr.name).join(', ')})`;\n    return a;\n  },\n};\n\nfor (const attrName in required) {\n  if (hasOwnProperty(required, attrName)) {\n    const a = required[attrName];\n    if (typeof a !== 'function') {\n      a.name = attrName;\n    }\n  }\n}\n\nconst optional: typeof(required) = {\n  fixed: (v: mixed) => required.fixed(v).makeOptional(),\n\n  string: required.string.makeOptional(),\n  nonemptyString: required.nonemptyString.makeOptional(),\n  integerString: required.integerString.makeOptional(),\n  uuid: required.uuid.makeOptional(),\n  email: required.email.makeOptional(),\n  dateString: required.dateString.makeOptional(),\n\n  boolean: required.boolean.makeOptional(),\n  number: required.number.makeOptional(),\n  integer: required.integer.makeOptional(),\n  regexp: required.regexp.makeOptional(),\n  date: required.date.makeOptional(),\n  function: required.function.makeOptional(),\n\n  array: required.array.makeOptional(),\n  map: required.map.makeOptional(),\n\n  tuple: (elements: Array<mixed>) => required.tuple(elements).makeOptional(),\n  schema: (fields: {[string]: mixed}) => required.schema(fields).makeOptional(),\n  instanceOf: (cls: any) => required.instanceOf(cls).makeOptional(),\n  oneOf: (...args: Array<mixed>) => required.oneOf(...args).makeOptional(),\n};\n\nexport default {\n  typeofPlus,\n\n  Attribute,\n  FixedAttribute,\n  CompoundAttribute,\n  TupleAttribute,\n  SchemaAttribute,\n  ObjectAttribute,\n  EnumAttribute,\n  AttributeValidationError,\n\n  validate,\n  isValid,\n  newDefault,\n  mergeDefault,\n  newSkeleton,\n  toAttribute,\n\n  optional,\n  required,\n\n  ...required,\n};\n\nexport type {\n  ValidatorFn,\n  DefaultValue,\n  ElementValidatorFn,\n  ElementIterator,\n  DetailedType,\n};\n"],"names":["typeConversion","objToString","Object","prototype","toString","objHasOwnProperty","hasOwnProperty","typeofPlus","x","call","obj","name","assign","source","key","keys","TypeError","result","push","inspect","value","depth","isArray","JSON","stringify","replace","RegExp","Date","Error","Symbol","contents","i","l","length","join","forEach","match","substr","AttributeValidationError","expected","got","optional","ExtendableError","Attribute","validator","defaultsTo","flags","default","isOptional","_validator","input","nullIsUndefined","undefined","newDefault","c","_clone","flag","_copyAttrProps","FixedAttribute","valueType","ObjectAttribute","Cls","cls","EnumAttribute","values","attrs","map","toAttribute","some","isValid","y","TupleAttribute","selements","elements","e","errors","validate","err","Array","arr","mergeDefault","newSkeleton","CompoundAttribute","skeletonMaker","iterator","_skeletonMaker","_iterator","spec","elementAttr","indexOf","eltAttr","elt","index","SchemaAttribute","sfields","fields","f","v","a","INTEGER_RE","UUID_RE","STRING_DATE_RE","EMAIL_RE","required","test","trim","Number","isNaN","parse","parseInt","ev","o","n","args","attr","attrName","fixed","makeOptional","string","nonemptyString","integerString","uuid","email","dateString","boolean","number","integer","regexp","date","function","array","tuple","schema","instanceOf","oneOf"],"mappings":"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"}